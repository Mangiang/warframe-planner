{"version":3,"sources":["DataAccess/IndexedDB.ts","Components/AutocompleteText.tsx","Components/ItemTree.tsx","Data/Item.ts","Context/ItemsListContext.ts","Pages/Wishlist.tsx","Components/ConfirmationDialog.tsx","Pages/Storage.tsx","Routes/Routes.tsx","Routes/TabPanel.tsx","Routes/Navigation.tsx","DataAccess/WarframeItems.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DBConfig","name","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","primaryKey","storeSchema","keypath","options","unique","renderRow","props","data","index","style","React","cloneElement","top","OuterElementContext","createContext","OuterElementType","forwardRef","ref","outerProps","useContext","AutocompleteText","children","other","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","length","itemSize","getChildSize","child","isValidElement","type","ListSubheader","gridRef","useRef","useEffect","current","resetAfterIndex","useResetCache","Provider","value","height","map","reduce","a","b","width","outerElementType","innerElementType","overscanCount","ItemTree","useState","setData","transformData","useCallback","item","amount","nodes","components","comp","tree","Item","id","imageName","this","ItemsListContext","Map","Wishlist","itemsListContext","searchData","setSearchData","undefined","selectedItem","setSelectedItem","selectedData","setSelectedData","getSearchResults","search","regex","RegExp","filteredItems","Array","from","values","filter","it","match","uniqueName","getComponents","parent","parentItem","get","buildQuantity","newItem","Promise","all","componentsData","multiplicator","Math","ceil","tmpItem","newSelectedItem","className","Autocomplete","ListboxComponent","getOptionLabel","option","onChange","event","newValue","renderInput","params","TextField","label","variant","Box","ConfirmationDialog","Dialog","open","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","title","DialogContent","DialogContentText","body","DialogActions","choices","choice","idx","Button","onClick","color","text","Alert","elevation","confirmationChoices","Storage","allClearDialogOpen","setAllClearDialogOpen","statusOpen","setStatusOpen","wishlistDB","useIndexedDB","inventoryDB","trackingDB","itemsDB","dialogs","choiceIdx","getAll","wishlist","inventory","tracking","items","removeList","push","elt","deleteRecord","buttonText","buttonOnClick","diag","Snackbar","autoHideDuration","severity","Routes","page","TabPanel","role","hidden","p","Navigation","setValue","AppBar","position","Tabs","aria-label","centered","tab","Tab","getItemData","axios","rawData","stringifiedData","JSON","stringify","checksum","crypto","createHash","update","digest","initDB","App","loadingItems","setLoadingItems","initMap","setInitMap","itemsMap","setItemsMap","updateItemList","console","log","itemListData","currentItemListData","add","itemList","parse","newItemMap","forEach","set","isLoading","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46da8f8e.chunk.js","sourcesContent":["import {initDB} from \"react-indexed-db\";\n\nconst DBConfig = {\n    name: \"warframe-planner\",\n    version: 1,\n    objectStoresMeta: [\n        {\n            store: 'items',\n            storeConfig: {keyPath: 'id', autoIncrement: true, primaryKey: true},\n            storeSchema: [\n                {name: 'value', keypath: 'value', options: {unique: false}},\n                {name: 'checksum', keypath: 'checksum', options: {unique: true}},\n            ]\n        },\n        {\n            store: 'wishlist',\n            storeConfig: {keyPath: 'id', autoIncrement: false},\n            storeSchema: [\n                {name: 'name', keypath: 'name', options: {unique: true}}\n            ]\n        },\n        {\n            store: 'inventory',\n            storeConfig: {keyPath: 'id', autoIncrement: false},\n            storeSchema: [\n                {name: 'name', keypath: 'name', options: {unique: true}},\n                {name: 'id', keypath: 'id', options: {unique: false}},\n                {name: 'have', keypath: 'have', options: {unique: false}},\n                {name: 'need', keypath: 'need', options: {unique: false}},\n            ]\n        },\n        {\n            store: 'tracking',\n            storeConfig: {keyPath: 'id', autoIncrement: false},\n            storeSchema: [\n                {name: 'name', keypath: 'name', options: {unique: true}}\n            ]\n        }\n    ]\n};\nexport const initDatabase = () => initDB(DBConfig);\n","import {ListChildComponentProps, VariableSizeList} from \"react-window\";\nimport React from \"react\";\nimport {ListSubheader, useMediaQuery, useTheme} from \"@material-ui/core\";\n\nconst LISTBOX_PADDING = 0; // px\n\nfunction renderRow(props: ListChildComponentProps) {\n    const { data, index, style } = props;\n    return React.cloneElement(data[index], {\n        style: {\n            ...style,\n            top: (style.top as number) + LISTBOX_PADDING,\n        },\n    });\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n    const outerProps = React.useContext(OuterElementContext);\n    return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data: any) {\n    const ref = React.useRef<VariableSizeList>(null);\n    React.useEffect(() => {\n        if (ref.current != null) {\n            ref.current.resetAfterIndex(0, true);\n        }\n    }, [data]);\n    return ref;\n}\n\n// Adapter for react-window\nexport const AutocompleteText = React.forwardRef<HTMLDivElement>(function ListboxComponent(props, ref) {\n    const { children, ...other } = props;\n    const itemData = React.Children.toArray(children);\n    const theme = useTheme();\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n    const itemCount = itemData.length;\n    const itemSize = smUp ? 36 : 48;\n\n    const getChildSize = (child: React.ReactNode) => {\n        if (React.isValidElement(child) && child.type === ListSubheader) {\n            return 48;\n        }\n\n        return itemSize;\n    };\n\n    const getHeight = () => {\n        if (itemCount > 8) {\n            return 8 * itemSize;\n        }\n        return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n    };\n\n    const gridRef = useResetCache(itemCount);\n\n    return (\n        <div ref={ref}>\n            <OuterElementContext.Provider value={other}>\n                <VariableSizeList\n                    itemData={itemData}\n                    height={getHeight() + 2 * LISTBOX_PADDING}\n                    width=\"100%\"\n                    ref={gridRef}\n                    outerElementType={OuterElementType}\n                    innerElementType=\"ul\"\n                    itemSize={(index) => getChildSize(itemData[index])}\n                    overscanCount={5}\n                    itemCount={itemCount}\n                >\n                    {renderRow}\n                </VariableSizeList>\n            </OuterElementContext.Provider>\n        </div>\n    );\n});\n","import React, {useCallback, useEffect, useState} from \"react\";\nimport MuiTreeView, {Tree} from \"material-ui-treeview\";\nimport {Item} from \"../Data/Item\";\n\ninterface Props {\n    data: Item | undefined\n}\n\nexport const ItemTree = (props: Props) => {\n    const [data, setData] = useState<Tree>();\n\n    const transformData = useCallback(\n        (item: Item): Tree => {\n            return {\n                value: item.amount ? `${item.amount} ${item.name}` : item.name,\n                nodes: !item.components ? [] : item.components.map(comp => transformData(comp))\n            } as Tree\n        },\n        [],\n    );\n\n    useEffect(() => {\n        if (!props.data) return;\n        setData(transformData(props.data));\n    }, [props.data, transformData])\n\n    return (<>\n        {data && <MuiTreeView tree={[data]}/>}\n    </>);\n}","export class Item {\n    name = ''\n    id = ''\n    amount = 1\n    imageName: string = ''\n    components: Item[] = []\n\n\n    constructor(name?: string, id?: string, amount?: number, components?: Item[], imageName?: string) {\n        this.name = name ? name : '';\n        this.id = id ? id : '';\n        this.amount = amount ? amount : 1;\n        this.components = components ? components : [];\n        this.imageName = imageName ? imageName : '';\n    }\n}","import React from \"react\";\nimport {RawItem} from \"../Data/WarframeItems\";\n\nexport const ItemsListContext = React.createContext<Map<string, RawItem>>(new Map());\n","import React, {useCallback, useContext, useEffect, useState} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport {AutocompleteText} from \"../Components/AutocompleteText\";\nimport {ItemTree} from \"../Components/ItemTree\";\nimport {Item} from \"../Data/Item\";\nimport {Box} from \"@material-ui/core\";\n// import {useIndexedDB} from \"react-indexed-db\";\n// import {Wish} from \"../Data/Wish\";\n// import {InventoryItem} from \"../Data/InventoryItem\";\nimport {ItemsListContext} from \"../Context/ItemsListContext\";\nimport {RawItem} from \"../Data/WarframeItems\";\n\nexport const Wishlist = () => {\n    const itemsListContext = useContext(ItemsListContext);\n    const [searchData, setSearchData] = useState<Item[]>([]);\n    const [selectedItem, setSelectedItem] = useState<Item | undefined>(undefined);\n    const [selectedData, setSelectedData] = useState<Item | undefined>(undefined);\n    // const [wishlistData, setWishlistData] = useState<Item[]>([]);\n    // const wishlistDB = useIndexedDB('wishlist');\n    // const inventoryDB = useIndexedDB('inventory');\n\n    const getSearchResults = useCallback(\n        (search: string) => {\n            const regex = new RegExp(search, 'i');\n            const filteredItems = Array.from(itemsListContext.values())\n                .filter(it => it.name.match(regex))\n                .map(it => (new Item(it.name, it.uniqueName)));\n            setSearchData(filteredItems)\n        },\n        [itemsListContext]\n    );\n\n\n    const getComponents = useCallback(\n        async (parent: Item, item: string): Promise<Item> => {\n            const parentItem: RawItem | undefined = itemsListContext.get(item)\n            let components: any = undefined;\n            if (parentItem && parentItem.components) {\n                components = {\n                    buildQuantity: parentItem.buildQuantity,\n                    components: parentItem.components.map(it => ({\n                        name: it.name,\n                        id: it.uniqueName,\n                        amount: it.itemCount,\n                        imageName: it.imageName\n                    }))\n                }\n            }\n\n            if (!components) return parent;\n\n            const newItem = parent;\n            const componentsData: any = await Promise.all(components.components.map(async (comp: any) => {\n                return await getComponents(new Item(comp.name, comp.id, comp.amount, [], comp.imageName), comp.id)\n            }));\n            newItem.components = []\n            if (newItem.amount && componentsData) {\n                const multiplicator = Math.ceil(newItem.amount / components.buildQuantity)\n                newItem.components = componentsData.map((it: any) => {\n                    const tmpItem = {...it}\n                    if (it.name !== \"Blueprint\")\n                        tmpItem.amount *= multiplicator\n                    return tmpItem\n                })\n            } else if (componentsData) {\n                newItem.components = componentsData\n            }\n            newItem.components.filter(it => it !== null && it !== undefined);\n            return newItem\n        },\n        [itemsListContext],\n    );\n\n\n    // const updateWishlistData = useCallback(\n    //     async (): Promise<void> => {\n    //         console.log(\"test\")\n    //         const list = (await wishlistDB.getAll()).filter(it => !wishlistData.find(elt => elt.id === it.id));\n    //         const newList = await Promise.all(list.map(it => getComponents(it, it.id)));\n    //         newList.push(...wishlistData)\n    //         setWishlistData(newList)\n    //     },\n    //     [wishlistDB, wishlistData, getComponents],\n    // );\n\n    useEffect(() => {\n        getSearchResults(\".*\");\n    }, [getSearchResults])\n\n    // useEffect(() => {\n    //     (async () => {\n    //        await updateWishlistData()\n    //     })()\n    // }, [updateWishlistData])\n\n    useEffect(() => {\n        (async () => {\n            if (!selectedItem) return;\n            const newSelectedItem = await getComponents(selectedItem, selectedItem.id);\n            setSelectedData(newSelectedItem)\n        })()\n    }, [selectedItem, getComponents])\n\n    // const addToInventory = async (item: Item) => {\n    //     let invItem: InventoryItem | undefined = await inventoryDB.getByID(item.id)\n    //     if (invItem) {\n    //         invItem.total += item.amount\n    //     } else {\n    //         invItem = new InventoryItem(item.name, item.id, 0, item.amount)\n    //     }\n    //\n    //     await Promise.all(item.components.map(comp => addToInventory(comp)))\n    //\n    //     await inventoryDB.add(invItem)\n    // }\n\n    // const addToWhishlist = async () => {\n    //     if (!selectedItem) return\n    //\n    //     await wishlistDB.add(new Wish(selectedItem.name, selectedItem.id, selectedItem.amount, selectedItem.imageName))\n    //     setWishlistData(await wishlistDB.getAll())\n    //     await addToInventory(selectedItem)\n    // }\n\n    return (\n        <div className=\"App\">\n            <Autocomplete\n                id=\"combo-box-demo\"\n                options={searchData}\n                ListboxComponent={AutocompleteText as React.ComponentType<React.HTMLAttributes<HTMLElement>>}\n                getOptionLabel={(option: Item) => option.name}\n                style={{width: 300}}\n                onChange={(event: any, newValue: Item | null) => {\n                    if (!newValue) return\n                    setSelectedItem(newValue);\n                }}\n                renderInput={(params) => <TextField {...params} label=\"Item search\" variant=\"outlined\"/>}\n            />\n            {/*<Button variant=\"contained\" onClick={addToWhishlist}>Add to whishlist</Button>*/}\n            <Box style={{width: \"20vw\"}}>\n                <ItemTree data={selectedData}/>\n                {/*{*/}\n                {/*    wishlistData.map(it =>*/}\n                {/*        <ItemTree key={it.id} data={it}/>)*/}\n                {/*}*/}\n            </Box>\n        </div>\n    );\n}","import {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    DialogTitle,\n    PropTypes\n} from \"@material-ui/core\";\ntype Color = PropTypes.Color;\n\nexport interface ConfirmationChoice {\n    color: Color\n    text: string\n}\n\ninterface Props {\n    title: string\n    body: string\n    open: boolean\n    choices: ConfirmationChoice[]\n    handleClose: (choiceIdx: number) => void\n}\n\nexport const ConfirmationDialog = (props: Props) => {\n    return (<Dialog\n        open={props.open}\n        onClose={() => props.handleClose(-1)}\n        aria-labelledby=\"dialog-title\"\n        aria-describedby=\"dialog-description\"\n    >\n        <DialogTitle id=\"dialog-title\">{props.title}</DialogTitle>\n        <DialogContent>\n            <DialogContentText id=\"dialog-description\">\n                {props.body}\n            </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n            {props.choices.map((choice, idx) =>\n                <Button key={idx} onClick={() => props.handleClose(idx)} color={choice.color}>\n                    {choice.text}\n                </Button>\n            )}\n        </DialogActions>\n    </Dialog>);\n}","import React, {useState} from 'react';\nimport {Box, Button, Snackbar} from \"@material-ui/core\";\nimport {useIndexedDB} from \"react-indexed-db\";\nimport {ConfirmationChoice, ConfirmationDialog} from \"../Components/ConfirmationDialog\";\nimport MuiAlert, {AlertProps} from \"@material-ui/lab/Alert\";\n\nconst Alert = (props: AlertProps) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst confirmationChoices: ConfirmationChoice[] = [\n    {\n        text: \"Cancel\",\n        color: \"secondary\"\n    },\n    {\n        text: \"Apply\",\n        color: \"primary\"\n    }\n]\n\nexport const Storage = () => {\n    const [allClearDialogOpen, setAllClearDialogOpen] = useState<boolean>(false);\n    // const [wishlistDialogOpen, setWishlistDialogOpen] = useState<boolean>(false);\n    // const [inventoryDialogOpen, setInventoryDialogOpen] = useState<boolean>(false);\n    const [statusOpen, setStatusOpen] = useState<boolean>(false);\n\n    const wishlistDB = useIndexedDB('wishlist');\n    const inventoryDB = useIndexedDB('inventory');\n    const trackingDB = useIndexedDB('tracking');\n    const itemsDB = useIndexedDB('items');\n\n\n    // const handleWishlistClose = async (choiceIdx: number) => {\n    //     if (confirmationChoices[choiceIdx].text === \"Apply\") {\n    //         const allData = await whishlistDB.getAll()\n    //         console.log(\"data\", allData)\n    //         await Promise.all(allData.map(elt => whishlistDB.deleteRecord(elt.id)))\n    //     }\n    //     setWishlistDialogOpen(false)\n    //     setStatusOpen(true)\n    // }\n    //\n    // const handleInventoryClose = async (choiceIdx: number) => {\n    //     if (confirmationChoices[choiceIdx].text === \"Apply\") {\n    //         const allData = await inventoryDB.getAll()\n    //         await Promise.all(allData.map(elt => inventoryDB.deleteRecord(elt.id)))\n    //     }\n    //     setInventoryDialogOpen(false)\n    //     setStatusOpen(true)\n    // }\n\n    const handleClearAllClose = async (choiceIdx: number) => {\n        setAllClearDialogOpen(false)\n        if (confirmationChoices[choiceIdx].text === \"Apply\") {\n            const wishlist = await wishlistDB.getAll()\n            const inventory = await inventoryDB.getAll()\n            const tracking = await trackingDB.getAll()\n            const items = await itemsDB.getAll()\n            const removeList = []\n            if (wishlist.length > 0)\n                removeList.push(...wishlist.map(elt => wishlistDB.deleteRecord(elt.id)))\n            if (inventory.length > 0)\n                removeList.push(...inventory.map(elt => inventoryDB.deleteRecord(elt.id)))\n            if (tracking.length > 0)\n                removeList.push(...tracking.map(elt => trackingDB.deleteRecord(elt.id)))\n            if (items.length > 0)\n                removeList.push(...items.map(elt => itemsDB.deleteRecord(elt.id)))\n            await Promise.all(removeList)\n        }\n        setStatusOpen(true)\n    }\n\n    const dialogs = [\n        {\n            open: allClearDialogOpen,\n            title: \"Do you really want to remove all your Data ?\",\n            body: \"This will remove all Data. You CANNOT revert this operation\",\n            choices: confirmationChoices,\n            handleClose: handleClearAllClose,\n            buttonText: \"Clear tracking data\",\n            buttonOnClick: () => setAllClearDialogOpen(true)\n        }\n        // {\n        //     open: wishlistDialogOpen,\n        //     title: \"Do you really want to remove all your wishlist Data ?\",\n        //     body: \"This will remove all wishlist Data. You CANNOT revert this operation\",\n        //     choices: confirmationChoices,\n        //     handleClose: handleWishlistClose,\n        //     buttonText: \"Clear wishlist data\",\n        //     buttonOnClick: () => setWishlistDialogOpen(true)\n        // },\n        // {\n        //     open: inventoryDialogOpen,\n        //     title: \"Do you really want to remove all your inventory Data ?\",\n        //     body: \"This will remove all inventory Data. You CANNOT revert this operation\",\n        //     choices: confirmationChoices,\n        //     handleClose: handleInventoryClose,\n        //     buttonText: \"Clear tracking data\",\n        //     buttonOnClick: () => setInventoryDialogOpen(true)\n        // }\n    ]\n\n    return (\n        <Box>\n            {dialogs.map((diag, idx) =>\n                <>\n                    <Button key={`button_${idx}`} variant=\"contained\" onClick={diag.buttonOnClick}>{diag.buttonText}</Button>\n                    <ConfirmationDialog key={`diag_${idx}`}\n                                        open={diag.open}\n                                        title={diag.title}\n                                        body={diag.body}\n                                        choices={diag.choices}\n                                        handleClose={diag.handleClose}/>\n                </>\n            )}\n            <Snackbar open={statusOpen} autoHideDuration={6000} onClose={() => setStatusOpen(false)}>\n                <Alert onClose={() => setStatusOpen(false)} severity=\"success\">\n                    Database successfully updated\n                </Alert>\n            </Snackbar>\n        </Box>\n    );\n}","import {Wishlist} from \"../Pages/Wishlist\";\n// import {Inventory} from \"../Pages/Inventory\";\nimport {Storage} from \"../Pages/Storage\";\nimport React from \"react\";\n\nexport interface Route {\n    id: string\n    'aria-controls': string\n    page: JSX.Element\n}\n\nexport const Routes: Route[] = [\n    {\n        id: `wishlist`,\n        'aria-controls': `wishlist`,\n        page: <Wishlist/>\n    },\n    // {\n    //     id: `inventory`,\n    //     'aria-controls': `inventory`,\n    //     page: <Inventory/>\n    // },\n    {\n        id: `manage data storage`,\n        'aria-controls': `manage data storage`,\n        page: <Storage/>\n    }\n]\n","import React from \"react\";\nimport {Box} from \"@material-ui/core\";\nimport {Routes} from \"./Routes\";\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: number;\n    value: number;\n}\n\nexport const TabPanel = (props: TabPanelProps) => {\n    const {children, value, index, ...other} = props;\n\n    return (\n        <Box\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={Routes[index].id}\n            aria-labelledby={Routes[index].id}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </Box>\n    );\n}","import React from \"react\";\nimport {AppBar, Tab, Tabs} from \"@material-ui/core\";\nimport {Routes} from \"./Routes\";\nimport {TabPanel} from \"./TabPanel\";\n\n\nexport const Navigation = () => {\n    const [value, setValue] = React.useState<number>(0);\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n    return (<>\n        <AppBar position=\"static\">\n            <Tabs value={value} onChange={handleChange} aria-label=\"warframe-planner navigation\" centered>\n                {Routes.map(tab => <Tab key={tab.id} label={tab.id} {...tab}/>)}\n            </Tabs>\n        </AppBar>\n        {Routes.map((tab, idx) => <TabPanel key={idx} value={value} index={idx}>{tab.page}</TabPanel>)}\n    </>);\n}","import axios from \"axios\";\nimport crypto from \"crypto\";\n\n\nconst dataUrl = 'https://raw.githubusercontent.com/WFCD/warframe-items/master/data/json/All.json';\n\nexport interface ItemDataList {\n    checksum: string\n    value: string\n}\n\nexport const getItemData = async (): Promise<ItemDataList> => {\n    const rawData = await axios.get(dataUrl)\n    const stringifiedData = JSON.stringify(rawData.data)\n    const checksum = crypto.createHash('md5').update(stringifiedData).digest('hex');\n    return {checksum, value: stringifiedData}\n}","import React, {useCallback, useEffect, useState} from 'react';\nimport './App.css';\nimport {Box, CircularProgress} from \"@material-ui/core\";\nimport {initDatabase} from \"./DataAccess/IndexedDB\"\nimport {Navigation} from \"./Routes/Navigation\";\nimport {useIndexedDB} from \"react-indexed-db\";\nimport {getItemData} from \"./DataAccess/WarframeItems\";\nimport {ItemsListContext} from \"./Context/ItemsListContext\";\nimport {RawItem} from \"./Data/WarframeItems\";\n\ninitDatabase()\n\nexport const App = () => {\n    const itemsDB = useIndexedDB('items');\n    const [loadingItems, setLoadingItems] = useState(true);\n    const [initMap, setInitMap] = useState<boolean>(false);\n    const [itemsMap, setItemsMap] = useState<Map<string, RawItem>>(new Map());\n\n    const updateItemList = useCallback(\n        async () => {\n            console.log(\"Updating items\")\n            const itemListData = await getItemData()\n            const currentItemListData = await itemsDB.getAll()\n\n            if (currentItemListData.length === 0) {\n                await itemsDB.add(itemListData)\n                console.log(\"No items yet, updating items\")\n            } else if (currentItemListData[0].checksum === itemListData.checksum) {\n                console.log(\"Same checksum, continue\")\n            } else {\n                console.log(\"Replacing older version\")\n                await Promise.all(currentItemListData.map(async it => itemsDB.deleteRecord(it.id)))\n                await itemsDB.add(itemListData)\n            }\n            const itemList = JSON.parse(itemListData.value);\n            const newItemMap = new Map()\n            itemList.forEach((it: RawItem) => newItemMap.set(it.uniqueName, it))\n            setItemsMap(newItemMap)\n            setLoadingItems(false)\n        }, [itemsDB]);\n\n    useEffect(() => {\n        if (!initMap) {\n            setInitMap(true);\n            (async () => await updateItemList())()\n        }\n    }, [initMap, updateItemList]);\n\n    const DisplayApp = (isLoading: boolean) => {\n        if (isLoading)\n            return (<><h1>Loading Warframe items please wait ...</h1><CircularProgress/></>)\n        return <Navigation/>\n    }\n\n    return (\n        <Box className=\"App\">\n            <ItemsListContext.Provider value={itemsMap}>\n                {DisplayApp(loadingItems)}\n            </ItemsListContext.Provider>\n        </Box>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}