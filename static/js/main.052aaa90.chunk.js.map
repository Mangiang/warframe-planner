{"version":3,"sources":["App.tsx","reportWebVitals.ts","DataAccess/GraphqlAccess.ts","index.tsx"],"names":["App","useQuery","gql","loading","error","data","console","log","JSON","stringify","Box","className","recipes","filter","elt","name","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","APP_ID","process","API_KEY","graphqlUri","app","Realm","loginApiKey","apiKey","a","credentials","logIn","user","assert","id","currentUser","getValidAccessToken","refreshCustomData","accessToken","client","ApolloClient","link","HttpLink","uri","fetch","options","headers","cache","InMemoryCache","typeDefs","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"+RAMaA,EAAM,WAAO,IAAD,EACUC,YAASC,YAAA,IAAD,oJAAhCC,EADc,EACdA,QAASC,EADK,EACLA,MAAOC,EADF,EACEA,KAQvB,OAAIF,GACAG,QAAQC,IAAIJ,GACL,2CAEPC,GACAE,QAAQC,IAAIH,GACL,yDAA4BI,KAAKC,UAAUL,QAGtDE,QAAQC,IAAIF,GAER,cAACK,EAAA,EAAD,CAAKC,UAAU,MAAf,SACI,6BAEQN,EAAKO,QAAQC,QAAO,SAACC,GAAD,aAAc,UAAAA,EAAIC,YAAJ,eAAUC,QAAS,KAAGC,KAAI,SAACH,GAAD,OAAc,6BAAoBA,EAAIC,MAAfD,EAAIC,eCf5FG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4FCFDQ,EAASC,yBACTC,EAAUD,mEACjBE,EAAU,uEAAmEH,EAAnE,YAMhB,IAAMI,EAAM,IAAIC,IAAUL,GAEpBM,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACVC,EAAcJ,IAAkBE,OAAOA,GAD7B,kBAGmBH,EAAIM,MAAMD,GAH7B,cAGNE,EAHM,OAIZC,IAAOD,EAAKE,MAAL,UAAYT,EAAIU,mBAAhB,aAAY,EAAiBD,KAJxB,kBAKLF,GALK,gCAOZhC,QAAQF,MAAM,mBAAd,MAPY,yDAAH,sDAWXsC,EAAmB,uCAAG,4BAAAP,EAAA,yDACnBJ,EAAIU,YADe,gCAEdR,EAAYJ,GAFE,6CAIdE,EAAIU,YAAYE,oBAJF,0CAMjBZ,EAAIU,mBANa,aAMjB,EAAiBG,aANA,2CAAH,qDASZC,EAAS,IAAIC,IAAa,CACnCC,KAAM,IAAIC,IAAS,CACfC,IAAKnB,EACLoB,MAAM,SAAD,sGAAC,CAAD,uCAAE,WAAOD,EAAKE,GAAZ,eAAAhB,EAAA,sEACuBO,IADvB,cACGE,EADH,OAECO,GAAWA,EAAQC,UAClBD,EAAQC,QAAT,+BAAsDR,GACtDtC,QAAQC,IAAI4C,EAAQC,UAJrB,kBAMIF,MAAMD,EAAKE,IANf,2CAAF,2DASTE,MAAO,IAAIC,IACXC,SA7CU,+uwMCIdC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACC,EAAA,EAAD,CAAgBd,OAAQA,EAAxB,SACI,cAAC,IAAD,UACI,cAAC,EAAD,UAIZe,SAASC,eAAe,SAM5B3C,M","file":"static/js/main.052aaa90.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Box} from \"@material-ui/core\";\nimport {useQuery} from \"@apollo/client\";\nimport gql from \"graphql-tag\";\n\nexport const App = () => {\n    const {loading, error, data} = useQuery(gql`\n        query {\n            recipes (sortBy: NAME_ASC, limit: 1000){\n                name\n            }\n        }\n    `);\n\n    if (loading) {\n        console.log(loading)\n        return <div>loading</div>\n    }\n    if (error) {\n        console.log(error)\n        return <div>encountered an error: {JSON.stringify(error)}</div>\n    }\n\n    console.log(data)\n    return (\n        <Box className=\"App\">\n            <ul>\n                {\n                    data.recipes.filter((elt: any) => elt.name?.length > 0).map((elt: any) => <li key={elt.name}>{elt.name}</li>)\n                }\n            </ul>\n        </Box>\n    );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as Realm from \"realm-web\";\nimport {ApolloClient, HttpLink, InMemoryCache} from \"@apollo/client\";\nimport assert from \"assert\";\nimport {loader} from 'graphql.macro';\n\nconst typeDefs = loader(\"./schema.graphql\");\n\nexport const APP_ID = process.env.REACT_APP_APP_ID;\nexport const API_KEY = process.env.REACT_APP_API_KEY;\nconst graphqlUri = `https://us-east-1.aws.stitch.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`;\nif (!APP_ID)\n    console.error(\"Please provide an APP_ID\")\nif (!API_KEY)\n    console.error(\"Please provide an API_KEY\")\n\nconst app = new Realm.App(APP_ID!);\n\nconst loginApiKey = async (apiKey: string): Promise<Realm.User | undefined> => {\n    const credentials = Realm.Credentials.apiKey(apiKey);\n    try {\n        const user: Realm.User = await app.logIn(credentials);\n        assert(user.id === app.currentUser?.id)\n        return user\n    } catch (err) {\n        console.error(\"Failed to log in\", err);\n    }\n}\n\nconst getValidAccessToken = async () => {\n    if (!app.currentUser) {\n        await loginApiKey(API_KEY!);\n    } else {\n        await app.currentUser.refreshCustomData();\n    }\n    return app.currentUser?.accessToken\n}\n\nexport const client = new ApolloClient({\n    link: new HttpLink({\n        uri: graphqlUri,\n        fetch: async (uri, options) => {\n            const accessToken = await getValidAccessToken();\n            if (options && options.headers) {\n                (options.headers as any)['Authorization'] = `Bearer ${accessToken}`;\n                console.log(options.headers);\n            }\n            return fetch(uri, options);\n        },\n    }),\n    cache: new InMemoryCache(),\n    typeDefs\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {RecoilRoot} from \"recoil\";\nimport {ApolloProvider} from \"@apollo/client\";\nimport {client} from \"./DataAccess/GraphqlAccess\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ApolloProvider client={client}>\n            <RecoilRoot>\n                <App/>\n            </RecoilRoot>\n        </ApolloProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}